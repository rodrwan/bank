// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package accounts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AccountReadServiceClient is the client API for AccountReadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountReadServiceClient interface {
	// Article returns a single article by ID
	GetAccountByUserID(ctx context.Context, in *GetAccountByUserIDRequest, opts ...grpc.CallOption) (*GetAccountByUserIDResponse, error)
}

type accountReadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountReadServiceClient(cc grpc.ClientConnInterface) AccountReadServiceClient {
	return &accountReadServiceClient{cc}
}

func (c *accountReadServiceClient) GetAccountByUserID(ctx context.Context, in *GetAccountByUserIDRequest, opts ...grpc.CallOption) (*GetAccountByUserIDResponse, error) {
	out := new(GetAccountByUserIDResponse)
	err := c.cc.Invoke(ctx, "/accounts.AccountReadService/GetAccountByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountReadServiceServer is the server API for AccountReadService service.
// All implementations must embed UnimplementedAccountReadServiceServer
// for forward compatibility
type AccountReadServiceServer interface {
	// Article returns a single article by ID
	GetAccountByUserID(context.Context, *GetAccountByUserIDRequest) (*GetAccountByUserIDResponse, error)
	mustEmbedUnimplementedAccountReadServiceServer()
}

// UnimplementedAccountReadServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountReadServiceServer struct {
}

func (UnimplementedAccountReadServiceServer) GetAccountByUserID(context.Context, *GetAccountByUserIDRequest) (*GetAccountByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountByUserID not implemented")
}
func (UnimplementedAccountReadServiceServer) mustEmbedUnimplementedAccountReadServiceServer() {}

// UnsafeAccountReadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountReadServiceServer will
// result in compilation errors.
type UnsafeAccountReadServiceServer interface {
	mustEmbedUnimplementedAccountReadServiceServer()
}

func RegisterAccountReadServiceServer(s grpc.ServiceRegistrar, srv AccountReadServiceServer) {
	s.RegisterService(&_AccountReadService_serviceDesc, srv)
}

func _AccountReadService_GetAccountByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountReadServiceServer).GetAccountByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounts.AccountReadService/GetAccountByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountReadServiceServer).GetAccountByUserID(ctx, req.(*GetAccountByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountReadService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "accounts.AccountReadService",
	HandlerType: (*AccountReadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountByUserID",
			Handler:    _AccountReadService_GetAccountByUserID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account.proto",
}

// AccountWriteServiceClient is the client API for AccountWriteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountWriteServiceClient interface {
	// CreateAccount creates an account.
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
}

type accountWriteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountWriteServiceClient(cc grpc.ClientConnInterface) AccountWriteServiceClient {
	return &accountWriteServiceClient{cc}
}

func (c *accountWriteServiceClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, "/accounts.AccountWriteService/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountWriteServiceServer is the server API for AccountWriteService service.
// All implementations must embed UnimplementedAccountWriteServiceServer
// for forward compatibility
type AccountWriteServiceServer interface {
	// CreateAccount creates an account.
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	mustEmbedUnimplementedAccountWriteServiceServer()
}

// UnimplementedAccountWriteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountWriteServiceServer struct {
}

func (UnimplementedAccountWriteServiceServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedAccountWriteServiceServer) mustEmbedUnimplementedAccountWriteServiceServer() {}

// UnsafeAccountWriteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountWriteServiceServer will
// result in compilation errors.
type UnsafeAccountWriteServiceServer interface {
	mustEmbedUnimplementedAccountWriteServiceServer()
}

func RegisterAccountWriteServiceServer(s grpc.ServiceRegistrar, srv AccountWriteServiceServer) {
	s.RegisterService(&_AccountWriteService_serviceDesc, srv)
}

func _AccountWriteService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountWriteServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounts.AccountWriteService/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountWriteServiceServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountWriteService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "accounts.AccountWriteService",
	HandlerType: (*AccountWriteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _AccountWriteService_CreateAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account.proto",
}
